---
description: Project Description
globs:
alwaysApply: true
---

# Project: VS Code Extension "translate-me"

I'm developing a VS Code extension that detects literal strings in Flutter projects to facilitate internationalization (i18n).

## Current Implemented Features:

### Hybrid String Detection System
* **Tier 1**: 40+ known Flutter widgets with optimized patterns (90% faster)
* **Tier 2**: Custom widget detection with PascalCase pattern matching
* Detects patterns like: `Text('Savana')`, `ElevatedButton(child: Text('Click here'))`
* Supports Material Design, Cupertino, and custom widgets
* Smart filtering to avoid false positives

### Triple Ignore Comment System
* `// translate-me-ignore` - ignores string on same line
* `// translate-me-ignore-next-line` - ignores string on next line  
* `// translate-me-ignore-all-file` - ignores all strings from comment to end of file

### VS Code Integration
* Real-time diagnostics with yellow underlines
* Code Actions (Quick Fix) with 3 options:
  1. Add ignore comment above line
  2. Add ignore comment at end of line
  3. Add file-level ignore comment
* Automatic activation on .dart file save/open
* Manual command: "Translate Me: Scan"
* Debounced scanning for performance

### Smart Detection Features
* Translation pattern detection (avoids `.tr()`, `.i18n()`, etc.)
* Multiline string support
* Nested widget parsing with balanced parentheses
* Escape sequence handling
* Position-accurate diagnostics

## Current Architecture (Modular)

```
src/
├── types.ts                    # TypeScript interfaces
├── constants.ts               # Widget patterns and configuration
├── utils/
│   ├── filters.ts            # String filtering utilities
│   └── position.ts           # Position calculation utilities
├── parsers/
│   └── comment-parser.ts     # Comment parsing logic
├── detectors/
│   ├── string-detector.ts    # String detection engine
│   └── widget-detector.ts    # Widget detection engine
├── core/
│   └── orchestrator.ts       # Main orchestration logic
├── services/
│   └── workspace-scanner.ts  # Workspace scanning service
├── providers/
│   └── code-actions-provider.ts # VS Code Code Actions
└── extension.ts              # Extension entry point
```

## Technical Stack
* **TypeScript** with strict type checking
* **VS Code API** (diagnostics, code actions, workspace)
* **globby** for .dart file discovery
* **Regex** with optimized patterns
* **Debounced observers** for performance

## Next Development Goals
1. **Quick Fix Actions**: Auto-extract strings to `.arb` files or `.tr()` calls
2. **Translation File Generation**: Automatically create/update `.arb` files
3. **Interpolation Support**: Handle `${variable}` in strings
4. **Configuration Panel**: User settings for custom patterns
5. **Batch Operations**: Process multiple files at once
6. **Testing Suite**: Unit and integration tests

## Code Quality Standards

### Clean Code Principles:
* **Meaningful Names**: Use descriptive variable and function names
* **Single Responsibility**: Each function/class has one clear purpose
* **Small Functions**: Keep functions focused and concise
* **Comments**: Explain WHY, not WHAT
* **Error Handling**: Implement proper error handling and edge cases
* **Consistent Formatting**: Follow TypeScript/JavaScript conventions

### SOLID Principles:
* **SRP**: Each module handles one specific task
* **OCP**: Code open for extension, closed for modification
* **LSP**: Derived classes substitutable for base classes
* **ISP**: Small, specific interfaces over large ones
* **DIP**: Depend on abstractions, not concretions

### Architecture Guidelines:
* **Separation of Concerns**: Detection, parsing, and UI logic separated
* **Dependency Injection**: Use VS Code's context for dependency management
* **Factory Pattern**: For creating different types of string matchers
* **Strategy Pattern**: For different detection algorithms
* **Observer Pattern**: For file change notifications

### Performance Considerations:
* **Hybrid Detection**: Fast known widgets + fallback custom detection
* **Lazy Loading**: Only scan files when necessary
* **Caching**: Cache results to avoid reprocessing
* **Debouncing**: Limit scan frequency on file changes (300ms)
* **Async Processing**: Use async/await for non-blocking operations
* **Memory Management**: Properly dispose of resources

## Testing Strategy
* Unit tests for core logic functions
* Test edge cases (multiline strings, nested widgets, escape sequences)
* Mock VS Code API for testing
* Integration tests for full workflow
* Performance tests for large codebases

## Help Context
Prioritize solutions that:
- Maintain the modular architecture
- Improve detection accuracy and avoid false positives
- Are compatible with real Flutter projects
- Follow clean code practices and SOLID principles
- Optimize performance with hybrid detection system
- Consider edge cases like escaped strings, interpolation, and multiline scenarios
- Provide excellent VS Code integration and user experience

## Current System Flow
1. **File Change** → Debounced scanner triggers
2. **Detection** → Hybrid system (known widgets → custom widgets)
3. **Parsing** → Comment parser checks ignore rules
4. **Filtering** → Remove false positives and translation patterns
5. **Diagnostics** → Create VS Code diagnostics with accurate positions
6. **Code Actions** → Provide Quick Fix options when diagnostic selected 